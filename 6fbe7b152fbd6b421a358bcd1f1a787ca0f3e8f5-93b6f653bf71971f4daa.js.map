{"version":3,"sources":["webpack:///./src/components/layout/loggedOut.js","webpack:///./node_modules/@hookform/error-message/dist/index.esm.js","webpack:///./node_modules/react-hook-form/dist/index.esm.js"],"names":["LoggedOut","children","id","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","ErrorMessage","_a","as","errors","name","message","render","rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","methods","error","messageFromRegister","types","props","isValidElement","cloneElement","createElement","messages","Fragment","isHTMLElement","value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","object","path","index","tempPath","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","get","obj","defaultValue","result","reduce","removeAllEventListeners","ref","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","options","previous","option","checked","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","concat","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","selected","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","target","source","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","deepEqual","object1","object2","isErrorObject","keys1","keys2","val1","val2","isRegex","RegExp","getValueAndMessage","validationData","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","cloneObject","isWeb","copy","File","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","window","document","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","fields","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldErrors","fieldError","focus","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","control","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","displayName","useFormContext"],"mappings":"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","file":"6fbe7b152fbd6b421a358bcd1f1a787ca0f3e8f5-93b6f653bf71971f4daa.js","sourcesContent":["import React from \"react\"\n\nexport default function LoggedOut({ children }) {\n\treturn (\n\t\t<div id=\"wrapper\">\n\t\t\t<h1 id=\"logo\">Todo APP</h1>\n\t\t\t{children}\n\t\t</div>\n\t)\n}\n","import React from 'react';\nimport { useFormContext, get } from 'react-hook-form';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar ErrorMessage = function (_a) {\n  var as = _a.as,\n      errors = _a.errors,\n      name = _a.name,\n      message = _a.message,\n      render = _a.render,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"render\"]);\n\n  var methods = useFormContext();\n  var error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  var messageFromRegister = error.message,\n      types = error.types;\n\n  var props = __assign(__assign({}, rest), {\n    children: messageFromRegister || message\n  });\n\n  return as ? React.isValidElement(as) ? React.cloneElement(as, props) : React.createElement(as, props) : render ? render({\n    message: messageFromRegister || message,\n    messages: types\n  }) : React.createElement(React.Fragment, __assign({}, props));\n};\n\nexport { ErrorMessage };","import \"core-js/modules/es.array.reduce\";\nimport { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst SELECT = 'select';\nconst UNDEFINED = 'undefined';\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nfunction attachEventListeners({\n  ref\n}, shouldAttachChangeEvent, handleChange) {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar compact = value => value.filter(Boolean);\n\nvar stringToPath = input => compact(input.replace(/[\"|']/g, '').replace(/\\[/g, '.').replace(/\\]/g, '').split('.'));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = (data, value = {}) => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : value[key] = data[key];\n  }\n\n  return value;\n};\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.ref.checked ? {\n  isValid: true,\n  value: option.ref.value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isMultipleSelect = element => element.type === \"\".concat(SELECT, \"-multiple\");\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.ref.checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === '' ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\n  const field = fieldsRef.current[name];\n\n  if (field) {\n    const {\n      ref: {\n        value,\n        disabled\n      },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber ? +value : valueAsDate ? ref.valueAsDate : setValueAs ? setValueAs(value) : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\n\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\n  const {\n    ref,\n    ref: {\n      name\n    }\n  } = field;\n  const fieldRef = fieldsRef.current[name];\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index) => {\n        if (isDetached(option.ref) && isSameRef(option, option.ref) || forceDelete) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, \"[\".concat(index, \"]\"));\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n    delete fieldsRef.current[name];\n  }\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key] ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\n  const output = {};\n\n  for (const name in fieldsRef.current) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : Array.isArray(search) && search.find(data => name.startsWith(data)))) {\n      output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\n    }\n  }\n\n  return shouldUnregister ? transformToNestObject(output) : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n\n  if (!isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nvar isErrorStateChanged = ({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n  return isValid && !!previousError || !isValid && !deepEqual(previousError, error, true) || isValid && get(fieldsWithValidation, name) && !get(validFields, name);\n};\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isMessage = value => isString(value) || isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}, shallowFieldsStateRef) => {\n  const name = ref.name;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? ((fieldsRef.current[name].options || [])[0] || {}).ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && value.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst getPath = (rootPath, values, paths = []) => {\n  for (const property in values) {\n    const rootName = rootPath + (isObject(values) ? \".\".concat(property) : \"[\".concat(property, \"]\"));\n    isPrimitive(values[property]) ? paths.push(rootName) : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\n  let value = undefined;\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar getFieldArrayParentName = name => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(\"^\".concat(searchName, \"([|.)\\\\d+\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = element => element.type === \"\".concat(SELECT, \"-one\");\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\n  const observer = new MutationObserver(() => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction cloneObject(data, isWeb = true) {\n  let copy;\n\n  if (isPrimitive(data) || isWeb && data instanceof File) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n\n    for (const item of data) {\n      copy.add(item);\n    }\n\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const fieldArrayDefaultValuesRef = useRef({});\n  const fieldArrayValuesRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const useWatchFieldsRef = useRef({});\n  const useWatchRenderFunctionsRef = useRef({});\n  const fieldsWithValidationRef = useRef({});\n  const validFieldsRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const defaultValuesAtRenderRef = useRef({});\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const handleChangeRef = useRef();\n  const shallowFieldsStateRef = useRef({});\n  const resetFieldArrayFunctionRef = useRef({});\n  const contextRef = useRef(context);\n  const resolverRef = useRef(resolver);\n  const fieldArrayNamesRef = useRef(new Set());\n  const modeRef = useRef(modeChecker(mode));\n  const {\n    isOnSubmit,\n    isOnTouch\n  } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = useState({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {}\n  });\n  const readFormStateRef = useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const formStateRef = useRef(formState);\n  const observerRef = useRef();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange\n  } = useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister ? {} : isEmptyObject(shallowFieldsStateRef.current) ? cloneObject(defaultValues, isWeb) : shallowFieldsStateRef.current;\n  const updateFormState = useCallback((state = {}) => {\n    if (!isUnMount.current) {\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\n      setFormState(formStateRef.current);\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\n    let shouldReRender = shouldRender || isErrorStateChanged({\n      errors: formStateRef.current.errors,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    const previousError = get(formStateRef.current.errors, name);\n\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n\n      unset(formStateRef.current.errors, name);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state)) {\n      updateFormState(Object.assign(Object.assign({}, state), resolverRef.current ? {\n        isValid: !!isValid\n      } : {}));\n    }\n  }, []);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const {\n      ref,\n      options\n    } = fieldsRef.current[name];\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref)) {\n      (options || []).forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(ref) && !isString(value)) {\n      ref.files = value;\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, []);\n  const isFormDirty = useCallback((name, data) => {\n    if (readFormStateRef.current.isDirty) {\n      const formValues = getValues();\n      name && data && set(formValues, name, data);\n      return !deepEqual(formValues, isEmptyObject(defaultValuesRef.current) ? defaultValuesAtRenderRef.current : defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n  const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      const isFieldDirty = !deepEqual(get(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      const state = {\n        isDirty: isFormDirty(),\n        dirtyFields: formStateRef.current.dirtyFields\n      };\n      const isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n      isChanged && shouldRender && updateFormState(state);\n      return isChanged ? state : {};\n    }\n\n    return {};\n  }, []);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!fieldsRef.current[name]) {\n        console.warn('📋 Field is missing with `name` attribute: ', name);\n        return false;\n      }\n    }\n\n    const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\n    shouldRenderBaseOnError(name, error, skipReRender);\n    return isUndefined(error);\n  }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  const executeSchemaOrResolverValidation = useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n    const previousFormIsValid = formStateRef.current.isValid;\n\n    if (Array.isArray(names)) {\n      const isInputsValid = names.map(name => {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n        return !error;\n      }).every(Boolean);\n      updateFormState({\n        isValid: isEmptyObject(errors)\n      });\n      return isInputsValid;\n    } else {\n      const error = get(errors, names);\n      shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\n      return !error;\n    }\n  }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  const trigger = useCallback(async name => {\n    const fields = name || Object.keys(fieldsRef.current);\n\n    if (resolverRef.current) {\n      return executeSchemaOrResolverValidation(fields);\n    }\n\n    if (Array.isArray(fields)) {\n      !name && (formStateRef.current.errors = {});\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, null)));\n      updateFormState();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields, readFormStateRef.current.isValid);\n  }, [executeSchemaOrResolverValidation, executeValidation]);\n  const setInternalValues = useCallback((name, value, {\n    shouldDirty,\n    shouldValidate\n  }) => {\n    const data = {};\n    set(data, name, value);\n\n    for (const fieldName of getPath(name, value)) {\n      if (fieldsRef.current[fieldName]) {\n        setFieldValue(fieldName, get(data, fieldName));\n        shouldDirty && updateAndGetDirtyState(fieldName);\n        shouldValidate && trigger(fieldName);\n      }\n    }\n  }, [trigger, setFieldValue, updateAndGetDirtyState]);\n  const setInternalValue = useCallback((name, value, config) => {\n    !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n    if (fieldsRef.current[name]) {\n      setFieldValue(name, value);\n      config.shouldDirty && updateAndGetDirtyState(name);\n      config.shouldValidate && trigger(name);\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value, config);\n\n      if (fieldArrayNamesRef.current.has(name)) {\n        fieldArrayDefaultValuesRef.current[name] = value;\n        resetFieldArrayFunctionRef.current[name]({\n          [name]: value\n        });\n\n        if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && config.shouldDirty) {\n          set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n          updateFormState({\n            isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), {\n              [name]: value\n            }), defaultValuesRef.current)\n          });\n        }\n      }\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n  }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\n\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name, found = true) => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (!name || !useWatchFieldsRef.current[key].size || useWatchFieldsRef.current[key].has(name) || useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(name, value, config) {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    let name = target.name;\n    const field = fieldsRef.current[name];\n    let error;\n    let isValid;\n\n    if (field) {\n      const isBlurEvent = type === EVENTS.BLUR;\n      const shouldSkipValidation = skipValidation(Object.assign({\n        isBlurEvent,\n        isReValidateOnChange,\n        isReValidateOnBlur,\n        isTouched: !!get(formStateRef.current.touched, name),\n        isSubmitted: formStateRef.current.isSubmitted\n      }, modeRef.current));\n      let state = updateAndGetDirtyState(name, false);\n      let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n      if (isBlurEvent && !get(formStateRef.current.touched, name) && readFormStateRef.current.touched) {\n        set(formStateRef.current.touched, name, true);\n        state = Object.assign(Object.assign({}, state), {\n          touched: formStateRef.current.touched\n        });\n      }\n\n      if (!shouldUnregister && isCheckBoxInput(target)) {\n        set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\n      }\n\n      if (shouldSkipValidation) {\n        renderWatchedInputs(name);\n        return (!isEmptyObject(state) || shouldRender && isEmptyObject(state)) && updateFormState(state);\n      }\n\n      if (resolverRef.current) {\n        const {\n          errors\n        } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n        const previousFormIsValid = formStateRef.current.isValid;\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error && resolverRef.current) {\n          const parentNodeName = getFieldArrayParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n\n          if (parentNodeName && (currentError || get(formStateRef.current.errors, parentNodeName))) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n        previousFormIsValid !== isValid && (shouldRender = true);\n      } else {\n        error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\n      }\n\n      renderWatchedInputs(name);\n      shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n    }\n  };\n\n  function setFieldArrayDefaultValues(data) {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = Object.assign(Object.assign({}, copy), {\n            [value]: []\n          });\n        }\n      }\n\n      return copy;\n    }\n\n    return data;\n  }\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister));\n  }\n\n  const validateResolver = useCallback(async (values = {}) => {\n    const {\n      errors\n    } = await resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);\n    const isValid = isEmptyObject(errors);\n    formStateRef.current.isValid !== isValid && updateFormState({\n      isValid\n    });\n  }, [isValidateAllFieldCriteria]);\n  const removeFieldEventListener = useCallback((field, forceDelete) => findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete), [shouldUnregister]);\n  const updateWatchedValue = useCallback(name => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (field) {\n      removeFieldEventListener(field, forceDelete);\n\n      if (shouldUnregister && !compact(field.options || []).length) {\n        unset(defaultValuesAtRenderRef.current, field.ref.name);\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n        unset(formStateRef.current.errors, field.ref.name);\n        set(formStateRef.current.dirtyFields, field.ref.name, true);\n        updateFormState({\n          isDirty: isFormDirty()\n        });\n        readFormStateRef.current.isValid && resolverRef.current && validateResolver();\n        updateWatchedValue(field.ref.name);\n      }\n    }\n  }, [validateResolver, removeFieldEventListener]);\n\n  function clearErrors(name) {\n    name && (Array.isArray(name) ? name : [name]).forEach(inputName => fieldsRef.current[inputName] && isKey(inputName) ? delete formStateRef.current.errors[inputName] : unset(formStateRef.current.errors, inputName));\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  }\n\n  function setError(name, error) {\n    const ref = (fieldsRef.current[name] || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    updateFormState({\n      isValid: false\n    });\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\n    const watchFields = watchId ? useWatchFieldsRef.current[watchId] : watchFieldsRef.current;\n    let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, false, fieldNames);\n\n    if (isString(fieldNames)) {\n      if (fieldArrayNamesRef.current.has(fieldNames)) {\n        const fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\n        fieldValues = fieldArrayValue.length !== compact(get(fieldValues, fieldNames, [])).length || !fieldArrayValue.length ? fieldArrayValuesRef.current : fieldValues;\n      }\n\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames)) ? defaultValue : get(defaultValuesRef.current, fieldNames), true);\n    }\n\n    const combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;\n\n    if (Array.isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {\n        [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)\n      }), {});\n    }\n\n    isWatchAllRef.current = isUndefined(watchId);\n    return transformToNestObject(!isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues);\n  }, []);\n\n  function watch(fieldNames, defaultValue) {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(name) {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef(ref, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute', ref, \"https://react-hook-form.com/api#useForm\");\n      }\n\n      if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) && !RegExp(\"^\".concat(ref.name.split(/\\[\\d+\\]$/)[0], \"[\\\\d+].\\\\w+\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(ref.name)) {\n        return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldRefAndValidationOptions = Object.assign({\n      ref\n    }, options);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n    const compareRef = currentRef => isWeb && (!isHTMLElement(ref) || currentRef === ref);\n\n    let field = fields[name];\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (field && (isRadioOrCheckbox ? Array.isArray(field.options) && compact(field.options).find(option => {\n      return value === option.ref.value && compareRef(option.ref);\n    }) : compareRef(field.ref))) {\n      fields[name] = Object.assign(Object.assign({}, field), options);\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [...compact(field && field.options || []), {\n          ref\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, options) : Object.assign({}, fieldRefAndValidationOptions);\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n    const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(isEmptyUnmountFields ? defaultValuesRef.current : shallowFieldsStateRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then(error => {\n          const previousFormIsValid = formStateRef.current.isValid;\n          isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue ? isObject(fieldValue) ? Object.assign({}, fieldValue) : fieldValue : defaultValue);\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\n    }\n  }\n\n  function register(refOrRegisterOptions, options) {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({\n          name: refOrRegisterOptions\n        }, options);\n      } else if (isObject(refOrRegisterOptions) && 'name' in refOrRegisterOptions) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return ref => ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = useCallback((onValid, onInvalid) => async e => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors = {};\n    let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, true));\n    readFormStateRef.current.isSubmitting && updateFormState({\n      isSubmitting: true\n    });\n\n    try {\n      if (resolverRef.current) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\n        formStateRef.current.errors = fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        for (const field of Object.values(fieldsRef.current)) {\n          if (field) {\n            const {\n              name\n            } = field.ref;\n            const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n\n            if (fieldError[name]) {\n              set(fieldErrors, name, fieldError[name]);\n              unset(validFieldsRef.current, name);\n            } else if (get(fieldsWithValidationRef.current, name)) {\n              unset(formStateRef.current.errors, name);\n              set(validFieldsRef.current, name, true);\n            }\n          }\n        }\n      }\n\n      if (isEmptyObject(fieldErrors) && Object.keys(formStateRef.current.errors).every(name => name in fieldsRef.current)) {\n        updateFormState({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n      }\n    } finally {\n      formStateRef.current.isSubmitting = false;\n      updateFormState({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n        submitCount: formStateRef.current.submitCount + 1\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria]);\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields\n  }) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  const reset = (values, omitResetState = {}) => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const {\n            ref,\n            options\n          } = field;\n          const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options) ? options[0].ref : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current, isWeb);\n    values && renderWatchedInputs('');\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    shallowFieldsStateRef.current = shouldUnregister ? {} : cloneObject(values, isWeb) || {};\n    resetRefs(omitResetState);\n  };\n\n  useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current = observerRef.current || !isWeb ? observerRef.current : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n  useEffect(() => () => {\n    observerRef.current && observerRef.current.disconnect();\n\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n\n    isUnMount.current = true;\n    Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, []);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: useCallback(setValue, [setInternalValue, trigger]),\n    getValues: useCallback(getValues, []),\n    register: useCallback(register, [defaultValuesRef.current]),\n    unregister: useCallback(unregister, [])\n  };\n  const control = useMemo(() => Object.assign({\n    isFormDirty,\n    updateWatchedValue,\n    shouldUnregister,\n    updateFormState,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange\n    },\n    validateResolver: resolver ? validateResolver : undefined,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    fieldArrayValuesRef\n  }, commonProps), [defaultValuesRef.current, updateWatchedValue, shouldUnregister, removeFieldEventListener, watchInternal]);\n  return Object.assign({\n    watch,\n    control,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (prop === 'isValid' && isOnSubmit) {\n            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\n          }\n        }\n\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState,\n    handleSubmit,\n    reset: useCallback(reset, []),\n    clearErrors: useCallback(clearErrors, []),\n    setError: useCallback(setError, []),\n    errors: formState.errors\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormContext = createContext(null);\nFormContext.displayName = 'RHFContext';\n\nconst useFormContext = () => useContext(FormContext);\n\nconst FormProvider = _a => {\n  var {\n    children\n  } = _a,\n      props = __rest(_a, [\"children\"]);\n\n  return createElement(FormContext.Provider, {\n    value: Object.assign({}, props)\n  }, children);\n};\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...(Array.isArray(value) ? value : [value || undefined]), ...data.slice(index)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = value => (Array.isArray(value) ? value : [value]).map(data => {\n  if (isObject(data)) {\n    const object = {};\n\n    for (const key in data) {\n      object[key] = true;\n    }\n\n    return object;\n  }\n\n  return true;\n});\n\nconst mapIds = (values = [], keyName) => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (typeof value === 'object') {\n        if (keyName in value) {\n          console.warn(\"\\uD83D\\uDCCB useFieldArray fieldValues contain the keyName `\".concat(keyName, \"` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray\"));\n          break;\n        }\n      } else {\n        console.warn(\"\\uD83D\\uDCCB useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray\");\n        break;\n      }\n    }\n  }\n\n  return values.map(value => Object.assign({\n    [keyName]: generateId()\n  }, value));\n};\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id'\n}) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\n    }\n  }\n\n  const focusIndexRef = useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef\n  } = control || methods.control;\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = useRef([...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName) ? get(fieldArrayDefaultValuesRef.current, name, []) : get(shouldUnregister ? defaultValuesRef.current : shallowFieldsStateRef.current, name, []))]);\n  const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = fields => fields.map((_a = {}) => {\n    var _b = keyName,\n        omitted = _a[_b],\n        rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n    return rest;\n  });\n\n  fieldArrayNamesRef.current.add(name);\n  const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), []);\n\n  const getCurrentFieldsValues = () => get(getValues(), name, getFieldArrayValue()).map((item, index) => Object.assign(Object.assign({}, getFieldArrayValue()[index]), item));\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (fieldArrayParentName && !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\n  }\n\n  const setFieldAndValidState = fieldsValues => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) && removeFieldEventListener(fieldsRef.current[key], true);\n    }\n  };\n\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = updatedFieldArrayValues => {\n    if (updatedFieldArrayValues) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n    }\n  };\n\n  const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(formStateRef.current.touched, name)) {\n      const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      const output = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (shouldUpdateValid && readFormStateRef.current.isValid && !validateResolver) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      isDirty: isFormDirty(name, omitKey(updatedFormValues))\n    });\n  };\n\n  const append = (value, shouldFocus = true) => {\n    const updateFormValues = [...getCurrentFieldsValues(), ...mapIds(Array.isArray(value) ? value : [value], keyName)];\n    setFieldAndValidState(updateFormValues);\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields\n      });\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, [...(get(shallowFieldsStateRef.current, name) || []), value]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend$1 = (value, shouldFocus = true) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(prepend, {\n      argA: emptyArray,\n      argC: fillBooleanArray(value)\n    }, updatedFieldArrayValues);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = index => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(updatedFieldValues);\n    resetFields();\n    batchStateUpdate(removeArrayAt, {\n      argA: index,\n      argC: index\n    }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\n  };\n\n  const insert$1 = (index, value, shouldFocus = true) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: emptyArray,\n      argC: index,\n      argD: fillBooleanArray(value)\n    }, updatedFieldArrayValues, insert(fieldValues, index));\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB,\n      argC: indexA,\n      argD: indexB\n    }, undefined, fieldValues, false);\n  };\n\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to,\n      argC: from,\n      argD: to\n    }, undefined, fieldValues, false);\n  };\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n\n        if (key.startsWith(\"\".concat(name, \"[\").concat(focusIndexRef.current, \"]\")) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n  useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = data => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name, fields]),\n    remove: useCallback(remove, [name]),\n    insert: useCallback(insert$1, [name]),\n    fields\n  };\n};\n\nfunction useWatch({\n  control,\n  name,\n  defaultValue\n}) {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef\n  } = control || methods.control;\n  const updateValue = useState()[1];\n  const idRef = useRef();\n  const defaultValueRef = useRef(defaultValue);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\n      }\n    }\n\n    const id = idRef.current = generateId();\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n\n    watchFieldsHookRender[id] = () => updateValue({});\n\n    watchInternal(name, defaultValueRef.current, id);\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [name, useWatchRenderFunctionsRef, useWatchFieldsRef, watchInternal, defaultValueRef]);\n  return idRef.current ? watchInternal(name, defaultValueRef.current, idRef.current) : isUndefined(defaultValue) ? isString(name) ? get(defaultValuesRef.current, name) : Array.isArray(name) ? name.reduce((previous, inputName) => Object.assign(Object.assign({}, previous), {\n    [inputName]: get(defaultValuesRef.current, inputName)\n  }), {}) : defaultValuesRef.current : defaultValue;\n}\n\nvar getInputValue = event => isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;\n\nfunction useField({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus\n}) {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange\n    },\n    formStateRef: {\n      current: {\n        isSubmitted,\n        touched,\n        errors,\n        dirtyFields\n      }\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n  const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray ? get(shallowFieldsStateRef.current, name) : isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue;\n\n  const [value, setInputStateValue] = useState(getInitialValue());\n  const valueRef = useRef(value);\n  const ref = useRef({\n    focus: () => null\n  });\n  const onFocusRef = useRef(onFocus || (() => {\n    if (isFunction(ref.current.focus)) {\n      ref.current.focus();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isFunction(ref.current.focus)) {\n        console.warn(\"\\uD83D\\uDCCB 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method\");\n      }\n    }\n  }));\n  const shouldValidate = useCallback(isBlurEvent => !skipValidation(Object.assign({\n    isBlurEvent,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isSubmitted,\n    isTouched: !!get(touched, name)\n  }, mode)), [isReValidateOnBlur, isReValidateOnChange, isSubmitted, touched, name, mode]);\n  const commonTask = useCallback(([event]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n  const registerField = useCallback(shouldUpdateValue => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\n      }\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = Object.assign({\n        ref: fieldsRef.current[name].ref\n      }, rules);\n    } else {\n      register(Object.defineProperty({\n        name,\n        focus: onFocusRef.current\n      }, 'value', {\n        set(data) {\n          setInputStateValue(data);\n          valueRef.current = data;\n        },\n\n        get() {\n          return valueRef.current;\n        }\n\n      }), rules);\n      shouldUpdateValue = !get(defaultValuesRef.current, name);\n    }\n\n    shouldUpdateValue && isNotFieldArray && setInputStateValue(getInitialValue());\n  }, [rules, name, register]);\n  useEffect(() => () => unregister(name), [name]);\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\"\\uD83D\\uDCCB \".concat(name, \" is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)\"));\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n  useEffect(() => {\n    isNotFieldArray && !fieldsRef.current[name] && registerField(true);\n  });\n  const onBlur = useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n  const onChange = useCallback((...event) => setValue(name, commonTask(event), {\n    shouldValidate: shouldValidate(),\n    shouldDirty: true\n  }), [setValue, name, shouldValidate]);\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name)\n    }\n  };\n}\n\nconst Controller = props => {\n  const {\n    rules,\n    as,\n    render,\n    defaultValue,\n    control,\n    onFocus\n  } = props,\n        rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  const {\n    field\n  } = useField(props);\n  const componentProps = Object.assign(Object.assign({}, rest), field);\n  return as ? isValidElement(as) ? cloneElement(as, componentProps) : createElement(as, componentProps) : render ? render(field) : null;\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useFieldArray, useForm, useFormContext, useWatch };"],"sourceRoot":""}